$system
getOption('repos')
install.packages("tibble")
install.packages("tibble")
version
version
install.packages("dplyr")
install.packages("readr")
install.packages("DT")
acs13husa <- read_csv("../data/ss13husa.csv", guess_max = 10000)
library(dplyr)
library(readr)
library(DT)
acs13husa <- read_csv("../data/ss13husa.csv", guess_max = 10000)
acs13husa <- read_csv("../data/ss13husa.csv", guess_max = 10000)
acs13husa <- read_csv("../data/ss13husa.csv", guess_max = 10000)
acs13husa <- read_csv("../data/ss13husa.csv", guess_max = 10000)
setwd("E:/ADS/Project 4/Fall2016-proj4-alex-saez/lib")
setwd("E:/ADS/Project 4/Fall2016-proj4-alex-saez/data")
list.files('.')
setwd('./A/')
list.files('.')
list.dirs('.')
27*27
a = list.dirs('.')
a = list.files('.', recursive = T)
a
setwd("E:/ADS/Project 4/Fall2016-proj4-alex-saez/data")
songs_A = list.files('./A/', recursive = T)
songs_B = list.files('./B/', recursive = T)
1784+566
setwd("E:/ADS/Project 4/Fall2016-proj4-alex-saez/lib")
songs_A = list.files('../data/A/', recursive = T)
songs_B = list.files('../data/B/', recursive = T)
songs_A[1]
s = songs_A[1]
strsplit(s,'/')
strsplit(s,'/')[[1]]
strsplit(s,'/')[[1]][3]
s
oldname = paste('../data/A', s, sep='')
oldname
oldname = paste('../data/A', s, sep='/')
oldname
newname = paste('../data/songs', strsplit(s,'/')[[1]][3], sep='/')
newname
file.rename(from=oldname, to=newname)
source('~/.active-rstudio-document')
a = c(songs_A, songs_B)
for(s in songs_B){
oldname = paste('../data/B', s, sep='/')
newname = paste('../data/songs', strsplit(s,'/')[[1]][3], sep='/')
file.rename(from=oldname, to=newname)
}
sound = h5read('../data/songs/TRAAABD128F429CF47.h5', '/analysis')
library(rhdf5)
sound = h5read('../data/songs/TRAAABD128F429CF47.h5', '/analysis')
sound
names(sound)
sound$songs$danceability
sound$songs
sound$songs$duration
sound$bars_start
sound$segment_start
sound$segments_start
sound$segments_pitches
dim(sound$segments_pitches)
unique(sound$segments_pitches)
image(sound$segments_pitches)
image(t(sound$segments_pitches))
image(t(sound$segments_timbre))
image(sound$segments_start,1:12, t(sound$segments_timbre))
range(sound$segments_pitches)
range(sound$segments_timbre)
image(sound$segments_start,1:12, t(sound$segments_pitches))
plot(sound$segments_start, sound$segments_loudness_max)
plot(sound$segments_start, sound$segments_loudness_max, type = 1)
plot(sound$segments_start, sound$segments_loudness_max, lty=1)
plot(sound$segments_start, sound$segments_loudness_max, type='l')
plot(sound$segments_start, sound$segments_loudness_start, type='l')
plot(sound$segments_start, sound$segments_loudness_max_time, type='l')
song = sound
names(song$songs)
ibrary(dplyr)
library(dplyr)
features1 = song$songs %>%
select("danceability", "energy", "key", "loudness", "mode", "tempo", "time_signature")
features1 = song$songs %>%
select(danceability, energy, key, loudness, mode, tempo, time_signature)
features1
song$segments_pitches
dim(song$segments_pitches)
rowSums(song$segments_pitches)
rowSums(song$segments_pitches)/ sum(song$segments_pitches)
pitches = rowSums(song$segments_pitches)/sum(song$segments_pitches)
paste('pitch', 1:12, sep='_')
paste('pitch', 1:length(pitches), sep='_')
names(pitches) = paste('pitch', 1:length(pitches), sep='_')
pitches
pitches = as.data.frame(pitches)
pitches
pitches = rowSums(song$segments_pitches)/sum(song$segments_pitches)
names(pitches) = paste('pitch', 1:length(pitches), sep='_')
pitches = data.frame(pitches)
pitches
pitches = rowSums(song$segments_pitches)/sum(song$segments_pitches)
pitche_names = paste('pitch', 1:length(pitches), sep='_')
pitches = data.frame(pitche_names=pitches)
pitches
pitches = rowSums(song$segments_pitches)/sum(song$segments_pitches)
names(pitches) = paste('pitch', 1:length(pitches), sep='_')
pitches = rowSums(song$segments_pitches)/sum(song$segments_pitches)
names(pitches) = paste('pitch', 1:length(pitches), sep='_')
matrix(pitches,nrow=1)
data.frame(matrix(pitches,nrow=1))
pitches = rowSums(song$segments_pitches)/sum(song$segments_pitches)
pitche_names = paste('pitch', 1:length(pitches), sep='_')
data.frame(pitche_names = matrix(pitches,nrow=1))
data.frame(pitch = matrix(pitches,nrow=1))
data.frame(pitche_names)
data.frame(colnames = pitche_names)
pitches = rowSums(song$segments_pitches)/sum(song$segments_pitches)
pitches = data.frame(pitch = matrix(pitches,nrow=1))
pitches
rowSums(song$segments_timbres)/sum(song$segments_timbres)
song$segments_timbres
source('E:/ADS/Project 4/Fall2016-proj4-alex-saez/lib/extract_features.R', echo=TRUE)
rowSums(song$segments_timbre)/sum(song$segments_timbre)
dim(song$segments_timbre)
range(song$segments_timbre)
source('E:/ADS/Project 4/Fall2016-proj4-alex-saez/lib/fit_topicmodel.R', echo=TRUE)
install.packages(topicmodels)
install.packages('topicmodels')
source('E:/ADS/Project 4/Fall2016-proj4-alex-saez/lib/fit_topicmodel.R', echo=TRUE)
source('E:/ADS/Project 4/Fall2016-proj4-alex-saez/lib/fit_topicmodel.R', echo=TRUE)
topicmodel_50 = LDA(dtm_Tr, k=50, method="Gibbs")
topicmodel_80 = LDA(dtm_Tr, k=80, method="Gibbs")
p_50 = perplexity(topicmodel_50, newdata = dtm_Te)
p_80 = perplexity(topicmodel_80, newdata = dtm_Te)
plot(c(p_10, p_20, p_30, p_40, p_50, p_80))
topicmodel_100 = LDA(dtm_Tr, k=100, method="Gibbs")
topicmodel_120 = LDA(dtm_Tr, k=120, method="Gibbs")
p_100 = perplexity(topicmodel_100, newdata = dtm_Te)
p_120 = perplexity(topicmodel_120, newdata = dtm_Te)
plot(c(p_10, p_20, p_30, p_40, p_50, p_80, p_100, p_120))
topicmodels = list(tm10 = topicmodel_10,
tm20 = topicmodel_20,
tm30 = topicmodel_30,
tm40 = topicmodel_40,
tm50 = topicmodel_50)
save(topicmodels, file='../output/topicmodels.RData')
load('../output/features.RData')
load('../output/topicmodels.RData')
tm = topicmodels$tm20
tm@gamma[1,]
sum(tm@gamma[1,])
sum(tm@beta[,1])
tm@beta[1:20,1]
tm@terms[tm@wordassignments$j[tm@wordassignments$i==1]]
load('../data/lyr.RData')
names(lyr)[lyr[1,]>0]
terms = terms(tm, 30)
terms
a = topics(tm)
a = topics(tm, 2)
topics = topics(tm, 2)
pc = prcomp(X)
topicmodel_20 = LDA(dtm_Tr, k=20, method="Gibbs")
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
load("../data/lyr.RData")
song_ids = lyr$`dat2$track_id`
lyr = lyr[, -c(1:3,6:30)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
corp = VCorpus(VectorSource(songs))
dtm_Tr = DocumentTermMatrix(corp, control = list(wordLengths = c(0, Inf)))
dtm = DocumentTermMatrix(corp, control = list(wordLengths = c(0, Inf)))
topicmodel_20 = LDA(dtm, k=20, method="Gibbs")
save(topicmodel_20, file='../output/topicmodel_20.RData')
tm = topicmodel_20
load('../data/lyr.RData')
load('../output/features.RData')
load('../output/topicmodel_20.RData')
song_ids = lyr$`dat2$track_id`
lyr = lyr[, -c(1:3,6:30)]
names(lyr)[lyr[1,]>0]
tm@terms[tm@wordassignments$j[tm@wordassignments$i==1]]
tm = topicmodel_20
tm = topicmodel_20
tm@terms[tm@wordassignments$j[tm@wordassignments$i==1]]
tm@terms[tm@wordassignments$j[tm@wordassignments$i==100]]
names(lyr)[lyr[100,]>0]
terms = terms(tm, 50)
View(terms)
pc = prcomp(X)
topics = topics(tm, 2)
plot(pc$x[,1], pc$x[,2])
plot(pc$x[,1], pc$x[,2], pch=1)
plot(pc$x[,1], pc$x[,2], pch=2)
plot(pc$x[,1], pc$x[,2], pch=3)
plot(pc$x[,1], pc$x[,2], pch=4)
plot(pc$x[,1], pc$x[,2], pch=5)
plot(pc$x[,1], pc$x[,2], pch='.')
plot(pc$x[,1], pc$x[,2], pch='@')
plot(pc$x[,1], pc$x[,2], pch='@', cex=3)
plot(pc$x[,1], pc$x[,2], pch='@', cex=1)
plot(pc$x[,1], pc$x[,2], pch='@', cex=.5)
plot(pc$x[,1], pc$x[,2], pch='.')
plot(pc$x[,1], pc$x[,2], pch='o',cex=.5)
library(ggplot2)
ggplot(pc$x[,1], pc$x[,2]) +
geom_point()
ggplot(pc, aes($x[,1], pc$x[,2])) +
geom_point()
ggplot(pc, aes($x[,1], pc$x[,2])) +
geom_point()
ggplot(pc, aes($x[,1], pc$x[,2])) + geom_point()
ggplot(pc, aes(x[,1], x[,2])) + geom_point()
ggplot(aes(pc$x[,1], pc$x[,2])) + geom_point()
geom_point(aes(pc$x[,1], pc$x[,2]))
qplot(aes(pc$x[,1], pc$x[,2]))
qplot(pc$x[,1], pc$x[,2])
qplot(pc$x[,1], pc$x[,2], col=topics[1,])
qplot(pc$x[,1], pc$x[,2], col=as.factor(topics[1,]))
terms
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
songs[grepl('qui',songs)]
songs[grepl('die',songs)]
songs[grepl('das',songs)]
songs[grepl('von',songs)]
songs[grepl('auf',songs)]
songs[grepl('ich',songs)]
songs[grepl('auch',songs)]
songs[grepl('aus',songs)]
songs[grepl('auf',songs)]
songs = songs[-grepl('auf',songs)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
songs = songs[!grepl('auf',songs)]
grep('ich',songs)
songs[grepl('auch',songs)]
songs = songs[!grepl('auch',songs)]
songs[grepl('auch',songs)]
songs[grepl('das',songs)]
songs[grepl('aber',songs)]
songs[grepl('ich',songs)]
songs[grepl('ein',songs)]
songs[grepl('nicht',songs)]
songs[grepl('und',songs)]
songs[grepl('nicht',songs)]
songs = songs[!grepl('nicht',songs)]
songs[grepl('nacht',songs)]
songs[grepl('noch',songs)]
songs[grepl('das',songs)]
songs[grepl('ich',songs)]
songs[grepl('ich',songs) & grepl('und',songs)]
songs[grepl('ich',songs) & grepl('und',songs) & grepl('das',songs)]
songs[grepl('aus',songs)]
songs[grepl('ich',songs) & grepl('und',songs) & grepl('das',songs)]
songs[grepl('kein',songs)]
songs[grepl('klein',songs)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
songs[!(grepl('ich',songs) & grepl('und',songs) & grepl('das',songs))]
songs[grepl('auf',songs)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
songs = songs[!grepl('auf',songs) & !grepl('auch',songs) & !grepl('nicht',songs)]
songs[!(grepl('ich',songs) & grepl('und',songs) & grepl('das',songs))]
songs = songs[!(grepl('ich',songs) & grepl('und',songs) & grepl('das',songs))]
songs[grepl('aux',songs)]
songs = songs[!grepl('aux',songs)]
songs = songs[!grepl('amour',songs)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
# German:
songs = songs[!grepl('auf',songs) & !grepl('auch',songs) & !grepl('nicht',songs)]
songs = songs[!(grepl('ich',songs) & grepl('und',songs) & grepl('das',songs))]
# French:
songs = songs[!grepl('aux',songs)]
songs[grepl('amour',songs)]
songs = songs[!grepl('amour',songs)]
songs[grepl('je',songs)]
songs[grepl('ces',songs)]
songs[grepl('comm',songs)]
songs[grepl('cest',songs)]
songs[(grepl('je',songs) & grepl('cest',songs))]
songs[grepl('les',songs)]
songs = songs[!(grepl('je',songs) & grepl('cest',songs))]
songs[grepl('je',songs)]
songs[grepl('ces',songs)]
songs[grepl('pour',songs)]
songs[grepl('pour',songs) & grepl('ce',songs)]
songs[grepl('pour',songs) & grepl('ces',songs)]
songs[grepl('pour',songs) & grepl('comm',songs)]
songs = songs[!(grepl('pour',songs) & grepl('comm',songs))]
songs[grepl('pour',songs)]
songs[grepl('moi',songs)]
songs = songs[!grepl('moi',songs)]
songs = songs[!grepl('aussi',songs)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
# German:
songs = songs[!grepl('auf',songs) & !grepl('auch',songs) & !grepl('nicht',songs)]
songs = songs[!(grepl('ich',songs) & grepl('und',songs) & grepl('das',songs))]
# French:
songs = songs[!grepl('aux',songs)]
songs = songs[!grepl('amour',songs)]
songs = songs[!(grepl('je',songs) & grepl('cest',songs))]
songs = songs[!(grepl('pour',songs) & grepl('comm',songs))]
songs = songs[!grepl('moi',songs)]
songs[grepl('aussi',songs)]
songs[grepl('je',songs)]
songs[grepl('comm',songs)]
songs[grepl('une',songs)]
songs[grepl('aussi',songs)]
songs[grepl('bien',songs)]
songs[grepl('tout',songs)]
songs = songs[!grepl('tout',songs)]
songs[grepl('aussi',songs)]
songs[grepl('je',songs)]
songs[grepl('comm',songs)]
songs[grepl('une',songs)]
all_songs = list.files('../data/songs/')
song = h5read(paste("../data/songs/", all_songs[1], sep=""), '/meta')
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
# German:
songs = songs[!grepl('auf',songs) & !grepl('auch',songs) & !grepl('nicht',songs)]
songs = songs[!(grepl('ich',songs) & grepl('und',songs) & grepl('das',songs))]
# French:
songs = songs[!grepl('aux',songs)]
songs = songs[!grepl('amour',songs)]
# songs = songs[!(grepl('je',songs) & grepl('cest',songs))]
# songs = songs[!(grepl('pour',songs) & grepl('comm',songs))]
songs = songs[!grepl('moi',songs)]
songs = songs[!grepl('tout',songs)]
songs[grepl('une',songs)]
songs = songs[!(grepl('pour',songs) & grepl('comm',songs))]
songs = songs[!(grepl('je',songs) & grepl('cest',songs))]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
# German:
songs = songs[!grepl('auf',songs) & !grepl('auch',songs) & !grepl('nicht',songs)]
songs = songs[!(grepl('ich',songs) & grepl('und',songs) & grepl('das',songs))]
# French:
songs = songs[!grepl('aux',songs) & !grepl('moi',songs) & !grepl('tout',songs)]
# songs = songs[!grepl('amour',songs)]
songs = songs[!(grepl('je',songs) & grepl('cest',songs))]
songs = songs[!(grepl('pour',songs) & grepl('comm',songs))]
songs[grepl('amour',songs)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
# German:
songs = songs[!grepl('auf',songs) &
!grepl('auch',songs) &
!grepl('nicht',songs) &
!(grepl('ich',songs) & grepl('und',songs) & grepl('das',songs))]
songs[grepl('aus',songs)]
songs[grepl('ich',songs)]
songs[grepl('ein',songs)]
songs[grepl('das',songs)]
songs = songs[!grepl('aux',songs) &
!grepl('moi',songs) &
!grepl('tout',songs) &
!(grepl('je',songs) & grepl('cest',songs)) &
!(grepl('pour',songs) & grepl('comm',songs))]
songs[grepl('une',songs)]
songs[grepl('comm',songs)]
songs[grepl('y',songs)]
songs[grepl(' y ',songs)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
songs[grepl(' und ',songs)]
songs = songs[!grepl(' und ',songs)]
songs[grepl('ich',songs)]
songs[grepl(' ich ',songs)]
songs[grepl(' auf ',songs)]
songs = songs[!grepl(' und ',songs) & !grepl(' ich ',songs)]
songs[grepl(' auf ',songs)]
songs[grepl(' das ',songs)]
songs[grepl(' ein ',songs)]
songs[grepl(' die ',songs)]
songs[grepl(' aus ',songs)]
songs[grepl(' auf ',songs)]
songs = songs[!grepl(' und ',songs) & !grepl(' ich ',songs) & !grepl(' auf ',songs)]
songs[grepl(' auch ',songs)]
songs[grepl(' nicht ',songs)]
songs[grepl(' je ',songs)]
songs = songs[!grepl(' je ',songs)]
songs = songs[!grepl(' cest ',songs)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
# German:
songs = songs[!grepl(' und ',songs) & !grepl(' ich ',songs) & !grepl(' auf ',songs)]
# French:
songs = songs[!grepl(' je ',songs)]
songs[grepl(' cest ',songs)]
songs[grepl(' les ',songs)]
songs = songs[!grepl(' je ',songs) & !grepl(' les ',songs)]
songs[grepl(' cest ',songs)]
songs[grepl(' comm ',songs)]
songs[grepl(' est ',songs)]
songs[grepl(' cest ',songs)]
songs[grepl(' ce ',songs)]
songs[grepl(' au ',songs)]
songs[grepl(' aux ',songs)]
songs = songs[!grepl(' je ',songs) & !grepl(' les ',songs) & !grepl(' au ',songs)]
songs[grepl(' les ',songs)]
songs[grepl(' comm ',songs)]
songs[grepl(' cest ',songs)]
songs[grepl(' quon ',songs)]
songs = songs[!grepl(' je ',songs) & !grepl(' les ',songs) & !grepl(' au ',songs) & !grepl(' quon ',songs)]
songs[grepl(' comm ',songs)]
songs[grepl(' cest ',songs)]
songs[grepl(' est ',songs)]
songs[grepl(' y ',songs)]
songs[grepl(' y ',songs) & grepl(' and ',songs)]
songs[grepl(' yo ',songs) & grepl(' and ',songs)]
songs[grepl(' tu ',songs)]
songs = songs[!grepl(' tu ',songs)]
songs[grepl(' y ',songs)]
songs[grepl(' al ',songs)]
songs[grepl(' de ',songs)]
songs[grepl(' como ',songs)]
songs = songs[!grepl(' tu ',songs) & !grepl(' como ',songs)]
songs[grepl(' de ',songs)]
songs[grepl(' y ',songs)]
songs[grepl(' y ',songs) & grepl(' yo ',songs)]
songs[grepl(' y ',songs) & grepl(' ya ',songs)]
songs[grepl(' y ',songs) & grepl(' el ',songs)]
songs[grepl(' el ',songs)]
songs = songs[!grepl(' tu ',songs) & !grepl(' el ',songs) & !grepl(' como ',songs)]
songs[grepl(' y ',songs)]
songs[grepl(' que ',songs)]
songs = songs[!grepl(' tu ',songs) & !grepl(' el ',songs) & !grepl(' que ',songs) & !grepl(' como ',songs)]
songs[grepl(' y ',songs)]
songs[grepl(' al ',songs)]
songs[grepl(' ya ',songs)]
songs[grepl(' y ',songs)]
songs[grepl(' un ',songs)]
songs[grepl(' y ',songs)]
songs[grepl(' un ',songs)]
songs[grepl(' le ',songs)]
songs[grepl(' de ',songs)]
songs[grepl(' moi ',songs)]
songs[grepl(' mon ',songs)]
songs[grepl(' de ',songs)]
songs[grepl(' ou ',songs)]
songs[grepl(' oui ',songs)]
songs[grepl(' un ',songs)]
songs = songs[!grepl(' je ',songs) & !grepl(' les ',songs) & !grepl(' au ',songs) & !grepl(' quon ',songs) & !grepl(' deux ',songs)]
songs[grepl(' un ',songs)]
songs[grepl(' moi ',songs)]
songs[grepl(' te ',songs)]
songs = songs[!grepl(' tu ',songs) & !grepl(' el ',songs) & !grepl(' que ',songs) & !grepl(' como ',songs) & !grepl(' te ',songs)]
songs[grepl(' y ',songs)]
songs[grepl(' de ',songs)]
songs[grepl(' nao ',songs)]
songs[grepl(' não ',songs)]
songs[grepl(' che ',songs)]
songs[grepl(' chi ',songs)]
songs[grepl(' con ',songs)]
songs[grepl(' al ',songs)]
songs[grepl(' con ',songs)]
songs[grepl(' una ',songs)]
songs = songs[!grepl(' tu ',songs) & !grepl(' el ',songs) & !grepl(' que ',songs) & !grepl(' como ',songs) & !grepl(' te ',songs) & !grepl(' una ',songs)]
songs = songs[!grepl(' tu ',songs) & !grepl(' el ',songs) & !grepl(' que ',songs) & !grepl(' como ',songs) & !grepl(' te ',songs) & !grepl(' uma ',songs)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
# German:
songs = songs[!grepl(' und ',songs) & !grepl(' ich ',songs) & !grepl(' auf ',songs)]
# French:
songs = songs[!grepl(' je ',songs) & !grepl(' les ',songs) & !grepl(' au ',songs) & !grepl(' quon ',songs) & !grepl(' deux ',songs)]
# Spanish:
songs = songs[!grepl(' tu ',songs) & !grepl(' el ',songs) & !grepl(' que ',songs) & !grepl(' como ',songs) & !grepl(' te ',songs) & !grepl(' una ',songs)]
songs[grepl(' uma ',songs)]
songs[grepl(' tu ',songs)]
songs[grepl(' la ',songs)]
songs[grepl(' le ',songs)]
songs[grepl(' che ',songs)]
songs = songs[!grepl(' che ',songs)]
songs[grepl(' basta ',songs)]
songs[grepl(' su ',songs)]
songs[grepl(' io ',songs)]
songs[grepl(' lei ',songs)]
songs[grepl(' alla ',songs)]
songs[grepl(' un ',songs)]
songs[grepl(' una ',songs)]
songs[grepl(' mio ',songs)]
songs[grepl(' gli ',songs)]
songs[grepl(' os ',songs)]
load("../data/lyr.RData")
load("../data/lyr.RData")
load("../data/lyr.RData")
song_ids = lyr$`dat2$track_id`
lyr = lyr[, -c(1:3,6:30)]
songs = apply(lyr, 1, function(x){paste(rep(names(x)[x>0], x[x>0]), collapse=' ')})
ind_not_german = !grepl(' und ',songs) & !grepl(' ich ',songs) & !grepl(' auf ',songs)
ind_not_french = !grepl(' je ',songs) & !grepl(' les ',songs) & !grepl(' au ',songs) & !grepl(' quon ',songs) & !grepl(' deux ',songs)
ind_not_smapnish = !grepl(' tu ',songs) & !grepl(' el ',songs) & !grepl(' que ',songs) & !grepl(' como ',songs) & !grepl(' te ',songs) & !grepl(' una ',songs)
ind_not_italian = !grepl(' che ',songs) & !grepl(' alla ',songs)
ind_not_spanish = !grepl(' tu ',songs) & !grepl(' el ',songs) & !grepl(' que ',songs) & !grepl(' como ',songs) & !grepl(' te ',songs) & !grepl(' una ',songs)
ind_english = ind_not_german & ind_not_french & ind_not_spanish & ind_not_italian
sum(ind_english)
songs = songs[ind_english]
songs_ids = songs_ids[ind_english]
song_ids = song_ids[ind_english]
corp = VCorpus(VectorSource(songs))
dtm = DocumentTermMatrix(corp, control = list(wordLengths = c(0, Inf)))
topicmodel_10 = LDA(dtm, k=10, method="Gibbs")
save(topicmodel_10, file='../output/topicmodel_10.RData')
save(song_ids, file='../output/songs_in_english.RData')
tm = topicmodel_10
terms = terms(tm, 50)
topics = topics(tm, 2)
terms
load('../output/features.RData')
load('../output/songs_in_english.RData')
song_ids[1:10]
all_songs = list.files('../data/songs/')
all_songs[i]
i=1
all_songs[i]
